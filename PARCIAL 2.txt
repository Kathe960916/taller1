--1.
--Generar una función que retorne cuantos años tiene una persona.

CREATE OR REPLACE FUNCTION calcular_edad(fecha_nacimiento VARCHAR2) RETURN NUMBER IS
    fecha_actual DATE := TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD'), 'YYYY-MM-DD');
    fecha_nac DATE := TO_DATE(fecha_nacimiento, 'YYYY-MM-DD');
BEGIN
    RETURN TRUNC(MONTHS_BETWEEN(fecha_actual, fecha_nac) / 12);
END;

SELECT calcular_edad('1969-01-25') AS Años_Persona FROM DUAL;


--------------------------------------------------------------------------------------------------------------------------
--5.
 --crear una función que retorne si un trabajador está vivo o muerto.

CREATE OR REPLACE FUNCTION estado_vida_trabajador(p_person_id IN NUMBER) RETURN VARCHAR2 IS
    v_estado VARCHAR2(10);
BEGIN
   
    SELECT COUNT(*) INTO v_estado
    FROM persons_defuntions
    WHERE persons_id = p_person_id;

    IF v_estado > 0 THEN
        RETURN 'Fallecido';
    ELSE
        RETURN 'Vivo';
    END IF;
END;

SELECT estado_vida_trabajador(88) AS estado_de_vida FROM DUAL;
-------------------------------------------------------------------------------------------------------------------------------
--9.
--Cree un procedimiento que muestre el mejor trabajador de cada mina.

 SET SERVEROUTPUT ON;                                                                                                         
CREATE OR REPLACE PROCEDURE mejor_trabajador
AS
var_persona VARCHAR(200);
BEGIN
FOR I IN (
SELECT m1.mine_name AS mina, q1.persons_id AS persona, MAX(q1.suma) AS kg_recolectados
FROM (
SELECT M.mine_name, pw.persons_id, SUM(pw.kg_product) AS suma
FROM product_worker pw
INNER JOIN mines M ON pw.products_id = M.products_id
GROUP BY M.mine_name, pw.persons_id
)  q1
INNER JOIN (
SELECT mine_name, MAX(suma) AS max_suma
FROM (
SELECT M.mine_name, pw.persons_id, SUM(pw.kg_product) AS suma
FROM product_worker pw
INNER JOIN mines M ON pw.products_id = M.products_id
GROUP BY M.mine_name, pw.persons_id
)  
GROUP BY mine_name
)  m1 ON q1.mine_name = m1.mine_name AND q1.suma = m1.max_suma
GROUP BY m1.mine_name, q1.persons_id
) LOOP
SELECT NAME INTO var_persona FROM persons WHERE PERSONS_ID= I.persona;
DBMS_OUTPUT.PUT_LINE('NOMBRE: '||var_persona||' |ID: '||I.persona||' | MEJOR TRABAJADOR DE LA MINA  '||UPPER(I.mina)||' |RECOLECTÓ: '||I.kg_recolectados||'KG');
END LOOP;
END;
---------------------------------------------------------------------------------------------------------------------------------
--3.
--- Cree un procedimiento que registre un trabajador. tabla: workers Nota: validar que la
--persona exista antes de registrar como trabajador.

CREATE OR REPLACE PROCEDURE register_worker (
    p_id_number IN NUMBER,
    p_mines_id IN VARCHAR2,
    p_persons_id IN VARCHAR2,
    p_ingress_date IN VARCHAR2
)
IS
    v_person_exists NUMBER;
BEGIN
    -- Verificar si la persona existe
    SELECT COUNT(*) INTO v_person_exists
    FROM persons
    WHERE id = p_persons_id;

    -- Si la persona existe, registrar como trabajador
    IF v_person_exists > 0 THEN
        INSERT INTO workers (id, mines_id, persons_id, ingressDate)
        VALUES (p_id_number, p_mines_id, p_persons_id, p_ingress_date);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Trabajador registrado correctamente.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Error: La persona no existe en la base de datos.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al intentar registrar al trabajador.');
END register_worker;

execute register_worker (946,'2','315','2022-4-13');

--------------------------------------------------------------------------------------------------------
 --4 
 
 create or replace procedure pr_cur
(mina mines.MINE_NAME%type )
as
begin
for i in(SELECT p.persons_id as per_, p.name as name_, p.lastname as last_, p.birthdate as birth_
FROM persons p 
INNER JOIN workers w ON p.persons_id = w.persons_id 
INNER JOIN mines m ON w.mines_id = m.mines_id 
WHERE LOWER(m.mine_name) = LOWER(mina) AND p.sex = 'F') LOOP
DBMS_OUTPUT.PUT_LINE('ID_MUJER: '||i.per_||' |NOMBRE: '||i.name_||' |APELLIDOS: '||i.last_||' |FECHA_NACIMIENTO: '||i.birth_);
END LOOP;
END;

EXECUTE pr_cur('&Ingrese_Mina')




---------------------------------------------------------------------------------------------------------

--6.
CREATE OR REPLACE FUNCTION calcular_kilos_producidos(
    p_mine_id IN NUMBER
) RETURN NUMBER
IS
    v_total_kilos NUMBER := 0;
BEGIN                                                      
    -- Sumar la cantidad de kilos producidos por los trabajadores en la mina especificada
    SELECT SUM(kg_product)
    INTO v_total_kilos
    FROM product_worker pw
    INNER JOIN mines m ON pw.products_id = m.product_id
    WHERE m.id = p_mine_id;

    -- Si no se produce nada, retornar 0
    IF v_total_kilos IS NULL THEN
        RETURN 0;
    ELSE
        RETURN v_total_kilos;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;  -- Si no se encuentra ningún dato, retornar 0
END;

SELECT calcular_kilos_producidos(1) AS kilos_producidos_cameroon FROM dual;

-------------------------------------------------------------------------------------------------------------
2:  CREATE OR REPLACE TRIGGER validar_ingreso
before insert or update
ON workers
FOR EACH ROW
    DECLARE
        var_edad NUMBER;
        var_healthy NUMBER;
        BEGIN
            SELECT EXTRACT(YEAR FROM CURRENT_DATE)-EXTRACT(YEAR FROM BIRTHDATE)
                INTO var_edad FROM PERSONS 
                    WHERE persons_id=:NEW.persons_id;
            SELECT diagnostics_id into var_healthy
                from persons_medical_check
                    where persons_id=:NEW.persons_id;
            IF(var_healthy!=1) then
                raise_application_error(-20001,'La persona con el id' || :NEW.persons_id || 'NO ESTA EN CONDICIONES');
            END IF;
            IF(var_edad<12 OR var_edad>70) then
                raise_application_error(-20001,'La PERSONA CON EL ID ' || :NEW.persons_id || 'NO PUEDE SER UN TRABAJADOR');
            END IF;
            
    END validar_ingreso;
------------------------------------------------------------------------------------------
8: CREATE OR REPLACE PROCEDURE trabajadores_infectados_VIH(
    p_mine_name IN VARCHAR2
)
IS
    v_mine_id NUMBER;
    v_infected_count NUMBER := 0;
BEGIN
    -- Obtener el ID de la mina proporcionada
    SELECT id INTO v_mine_id
    FROM mines
    WHERE mine_name = p_mine_name;

    -- Contar la cantidad de trabajadores infectados con VIH en la mina especificada
    SELECT COUNT(*)
    INTO v_infected_count
    FROM workers w
    INNER JOIN persons p ON w.persons_id = p.id
    INNER JOIN health_records hr ON p.id = hr.persons_id
    WHERE w.mines_id = v_mine_id
    AND hr.hiv_positive = 'Yes';

    -- Mostrar el resultado
    DBMS_OUTPUT.PUT_LINE('Cantidad de trabajadores infectados con VIH en ' || p_mine_name || ': ' || v_infected_count);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontraron trabajadores infectados con VIH en la mina ' || p_mine_name);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
SET SERVEROUTPUT ON;
DECLARE
    v_mine_name VARCHAR2(100);
BEGIN
    -- Solicitar el nombre de la mina por teclado
    DBMS_OUTPUT.PUT('Ingrese el nombre de la mina: ');
    DBMS_OUTPUT.GET_LINE(v_mine_name);

    -- Llamar al procedimiento con el nombre de la mina ingresado
    trabajadores_infectados_VIH(v_mine_name);
END;
/
-----------------------------------------------------------------------------------------
7: CREATE OR REPLACE PROCEDURE cursor_trabajadores_fallecidos_menores_edad AS
    CURSOR c_trabajadores_fallecidos_menores_edad IS
        SELECT w.id, p.name, p.lastname, p.sex,
               EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM p.birthdate) AS edad
        FROM workers w
        INNER JOIN persons p ON w.persons_id = p.id
        WHERE EXTRACT(YEAR FROM p.birthdate) > EXTRACT(YEAR FROM w.ingressDate)
        AND p.death_date IS NOT NULL;
BEGIN
    -- Abrir el cursor y mostrar los resultados
    FOR trabajador IN c_trabajadores_fallecidos_menores_edad LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || trabajador.id || ', ' ||
                             'Nombre: ' || trabajador.name || ', ' ||
                             'Apellido: ' || trabajador.lastname || ', ' ||
                             'Sexo: ' || trabajador.sex || ', ' ||
                             'Edad: ' || trabajador.edad);
    END LOOP;
END;
/
SET SERVEROUTPUT ON;
BEGIN
    cursor_trabajadores_fallecidos_menores_edad;
END;
/


